import json
import boto3

AWS_REGION = 'ap-northeast-1'
dynamodb_table_name = 'products'
health_path = '/health'
product_path = '/product'
products_path = '/products'

def lambda_handler(event, context):
    print('Request event: ', event)
    response = None
    
    http_method = event['httpMethod']
    path = event['path']
    
    dynamodb = boto3.resource('dynamodb', region_name=AWS_REGION)
    table = dynamodb.Table(dynamodb_table_name)
    
    if http_method == 'GET' and path == health_path:
        response = build_response(200)
    elif http_method == 'GET' and path == product_path:
        response = get_product(table, event['queryStringParameters']['productId'])
    elif http_method == 'GET' and path == products_path:
        response = get_products(table)
    elif http_method == 'POST' and path == product_path:
        response = save_product(table, json.loads(event['body']))
    # Add cases for PATCH and DELETE here
    else:
        response = build_response(404, '404 Not Found')
    
    return response

def get_product(table, product_id):
    response = table.get_item(Key={'productId': product_id})
    item = response.get('Item')
    if item:
        return build_response(200, item)
    else:
        return build_response(404, 'Product not found')

def get_products(table):
    response = table.scan()
    items = response.get('Items', [])
    return build_response(200, {'products': items})

def save_product(table, item):
    table.put_item(Item=item)
    return build_response(200, {'Operation': 'SAVE', 'Message': 'SUCCESS', 'Item': item})

def build_response(status_code, body=None):
    if body is None:
        body = {}
    return {
        'statusCode': status_code,
        'headers': {
            'Content-Type': 'application/json'
        },
        'body': json.dumps(body)
    }
